<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JL Dinh</title>
    <link>https://jldinh.com/index.xml</link>
    <description>Recent content on JL Dinh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Powered by [Hugo](//gohugo.io). Theme by [PPOffice](http://github.com/ppoffice).</copyright>
    <lastBuildDate>Sun, 13 Sep 2015 16:49:43 +0000</lastBuildDate>
    <atom:link href="https://jldinh.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Trajectory of a projectile: the Angry Birds problem</title>
      <link>https://jldinh.com/2015/09/13/trajectory-of-a-projectile-the-angry-birds-problem</link>
      <pubDate>Sun, 13 Sep 2015 16:49:43 +0000</pubDate>
      
      <guid>https://jldinh.com/2015/09/13/trajectory-of-a-projectile-the-angry-birds-problem</guid>
      <description>&lt;p&gt;Differential equations are not only used to &lt;a href=&#34;https://jldinh.com/2015/09/13/differential-equations/&#34;&gt;predict when you will arrive somewhere&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Like at least &lt;a href=&#34;http://www.theguardian.com/technology/appsblog/2012/oct/10/angry-birds-200m-monthly-users&#34;&gt;200m other people&lt;/a&gt;, you may have run into this issue at one point of your life.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jldinh.com/images/angrybirds.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;How far should you drag the little bird to slay the evil pigs?&lt;/p&gt;

&lt;p&gt;First, let us make an observation. However you throw the bird, it always flies according to a parabolic trajectory.&lt;/p&gt;

&lt;p&gt;This is because the game is inspired by realphysics. The trajectory of real projectiles flung into the air depend on two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Its speed as it becomes airborne (in Angry Birds, this depends on how far back you draw the bird, and in which direction)&lt;/li&gt;
&lt;li&gt;The forces exerted on it: assuming we neglect friction, the only force exerted on the flying projectile is gravity (its weight).
We could write differential equations using &lt;a href=&#34;https://en.wikipedia.org/wiki/Newton%27s_laws_of_motion#Newton.27s_second_law&#34;&gt;Newton&amp;rsquo;s 2nd law&lt;/a&gt; to get an exact result, but let us keep this intuitive first.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we fling the bird upwards and forwards, then we can decompose its initial speed as it is released into two components: an horizontal component and a vertical component.&lt;/p&gt;

&lt;p&gt;As you probably know, weight (the only force exerted on the bird once it is released) is directed vertically, downwards. Therefore, it has no horizontal component.&lt;/p&gt;

&lt;p&gt;So what is going to happen next?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;On the horizontal axis, the bird is going to keep its horizontal velocity because no force affects it.&lt;/li&gt;
&lt;li&gt;On the vertical axis though, we have opposite tendencies. Because of its initial velocity, the bird is rising upwards. However, its weight is pulling it down, so it progressively slows down until it comes to a stop in the vertical axis. Then its starts falling down, faster and faster.
If you try to simulate the motion of the bird by drawing with a pencil on a piece of paper, you should get something that looks like a parabola.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, if you want to go further, we are going to need these differential equations. The weight of the projectile is the product of its mass $m$) and the gravitational acceleration $g$, so according to Newton&amp;rsquo;s Second Law:&lt;/p&gt;

&lt;p&gt;$$ m\frac{d^2x}{dt^2}=0 $$
$$ m\frac{d^2y}{dt^2}=-mg $$&lt;/p&gt;

&lt;p&gt;We integrate twice to get the trajectory of the projectile.&lt;/p&gt;

&lt;p&gt;$$ \frac{dx}{dt}=v_x $$
$$ \frac{dy}{dt}=v_y-mgt $$&lt;/p&gt;

&lt;p&gt;$$ x(t)=v_x.t $$
$$ y(t)=v_y.t-\frac{1}{2}gt^2$$&lt;/p&gt;

&lt;p&gt;We can then substitute $x$ in the equation of $y$.&lt;/p&gt;

&lt;p&gt;$$ y(t)=\frac{v_y}{v_x}x(t)-\frac{1}{2}\frac{g}{{v_x}^2}x(t)^2 $$&lt;/p&gt;

&lt;p&gt;We want to know at what distance ($x$) the projectile hits the ground ($y=0$). This requires solving a second degree equation, which yields to solutions.&lt;/p&gt;

&lt;p&gt;$$ y(t)=0\Leftrightarrow x(t)=0 \quad or \quad x(t)=\frac{2}{g}v_x v_y$$&lt;/p&gt;

&lt;p&gt;We discard the first as it is the launching point. The second one gives an equation for the range of the projectile depending on its launching speed (and the gravitational acceleration).&lt;/p&gt;

&lt;p&gt;We can go further and study which angle to shoot at to reach the maximal range. To do this, we first substitute $v_y$ in the equation.&lt;/p&gt;

&lt;p&gt;$$ v_x^2+v_y^2=v^2 \Rightarrow v_y=\sqrt{v^2-v_x^2} \&lt;br /&gt;
x(t)=\frac{2}{g}v_x \sqrt{v^2-v_x^2}$$&lt;/p&gt;

&lt;p&gt;We then differentiate the equation of $x$ with respect to $v_x$.&lt;/p&gt;

&lt;p&gt;$$ \frac{dx(t)}{dv_x}=\frac{2}{g}\left( \sqrt{v^2-v_x^2}-v_x^2\frac{1}{\sqrt{v^2-v_x^2}}\right )$$&lt;/p&gt;

&lt;p&gt;The maximum range is reached when the derivative is 0.&lt;/p&gt;

&lt;p&gt;$$ \frac{dx(t)}{dv_x}=0\Rightarrow v_x^2=v^2-v_x^2$$&lt;/p&gt;

&lt;p&gt;We recognize the expression of $v_y$ there.&lt;/p&gt;

&lt;p&gt;$$ v_x^2=v_y^2$$&lt;/p&gt;

&lt;p&gt;As both $v_x$ and $v_y$ are positive:&lt;/p&gt;

&lt;p&gt;$$ v_x=v_y$$&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;optimal angle&lt;/strong&gt; to launch a projectile and reach the &lt;strong&gt;maximal range&lt;/strong&gt; is therefore &lt;strong&gt;45 degrees&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jldinh.com/images/shotput.jpg&#34; alt=&#34;&#34; /&gt; &lt;small&gt;Photo by &lt;a href=&#34;http://www.flickr.com/photos/80405115@N00/14949411366&#34;&gt;Koji Kawano&lt;/a&gt; &lt;img src=&#34;https://jldinh.com/images/cc.png#cc&#34; alt=&#34;&#34; title=&#34;Attribution-NoDerivs License&#34; /&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;This result does not only apply to Angry Birds, but also to real sports, like the &lt;a href=&#34;http://en.wikipedia.org/wiki/Shot_put&#34;&gt;shot put&lt;/a&gt;, in which the optimal throwing angle is also close to 45 degrees.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Two putting styles are in current general use by shot put competitors: the _glide_ and the &lt;em&gt;spin&lt;/em&gt;. With all putting styles, the goal is to release the shot with maximum forward &lt;a href=&#34;http://en.wikipedia.org/wiki/Velocity&#34; title=&#34;Velocity&#34;&gt;velocity&lt;/a&gt; at an angle of approximately forty degrees.
(Source: &lt;a href=&#34;http://en.wikipedia.org/wiki/Shot_put#Legal_throws&#34;&gt;Wikipedia&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;small&gt;Banner photo by &lt;a href=&#34;http://www.flickr.com/photos/36604011@N08/6737187469&#34;&gt;Nick Harris1&lt;/a&gt; &lt;img src=&#34;https://jldinh.com/images/cc.png#cc&#34; alt=&#34;&#34; title=&#34;Attribution-NoDerivs License&#34; /&gt;&lt;/small&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Differential equations</title>
      <link>https://jldinh.com/2015/09/13/differential-equations</link>
      <pubDate>Sun, 13 Sep 2015 16:36:26 +0000</pubDate>
      
      <guid>https://jldinh.com/2015/09/13/differential-equations</guid>
      <description>&lt;p&gt;If you read the post about &lt;a href=&#34;https://jldinh.com/2015/09/13/boolean-algebra-and-adaptive-programs/&#34;&gt;Boolean algebra&lt;/a&gt;, you might have noticed a substantial limitation: it can only deal with binary (True/False) variables.&lt;/p&gt;

&lt;p&gt;How, then, can you make predictions for quantitative variables? You probably already know the answer.&lt;/p&gt;

&lt;p&gt;If you are going to the seaside by car, the seaside is 100 km away, and you are driving at 50 km/h, how long will it take you to reach the seaside?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jldinh.com/images/drive_river.jpg&#34; alt=&#34;&#34; title=&#34;Endless Possibilities by Zach Dischner&#34; /&gt; &lt;small&gt;Photo by &lt;a href=&#34;http://www.flickr.com/photos/35557234@N07/11533326155&#34;&gt;Zach Dischner&lt;/a&gt; &lt;a href=&#34;http://creativecommons.org/licenses/by/2.0/&#34; title=&#34;Attribution License&#34;&gt;&lt;img src=&#34;https://jldinh.com/images/cc.png#cc&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;2 hours, of course.&lt;/p&gt;

&lt;p&gt;To introduce a new tool - differential equations - here is another way to see the problem.&lt;/p&gt;

&lt;p&gt;Let $x$ be your position on the way to the seaside. $x=0$ is the starting point, $x=100$ is the arrival.&lt;/p&gt;

&lt;p&gt;Your speed is the rate of change of $x$, denoted as $\frac{dx}{dt}$.&lt;/p&gt;

&lt;p&gt;$$ \frac{dx}{dt}=50$$&lt;/p&gt;

&lt;p&gt;This is a differential equation. It describes the rate of change of a variable. This example is simple, because the differential equation is constant, but it could potentially be more complex and depend on your current position, e.g.:&lt;/p&gt;

&lt;p&gt;$$ \frac{dx}{dt}=100-\frac{1}{40}(x-50)^2$$&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jldinh.com/images/eqdiff.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Even if the differential equation is complex, you can still use it to plot the state of the system (e.g.: your position) at any instant in the future. This is what makes differential equations powerful.&lt;/p&gt;

&lt;p&gt;This is a process called &amp;ldquo;numerical integration&amp;rdquo;, and is generally handled by dedicated computer programs, but the idea is quite simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Check your current position in the simulation.&lt;/li&gt;
&lt;li&gt;Compute your current speed.&lt;/li&gt;
&lt;li&gt;Compute how far you are going to travel at that speed in one second.&lt;/li&gt;
&lt;li&gt;Add the result of step 3 to the value observed at step 1.&lt;/li&gt;
&lt;li&gt;Update your current position in the simulation based on the result of step 4.&lt;/li&gt;
&lt;li&gt;Go to step 1 and repeat.
You then just have to look at when $x$ becomes greater than 100 to know when you will arrive.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://jldinh.com/images/beach.jpg&#34; alt=&#34;&#34; title=&#34;Lano Beach by NeilsPhotography&#34; /&gt; &lt;small&gt;Photo by &lt;a href=&#34;http://www.flickr.com/photos/21976354@N07/2348897751&#34;&gt;NeilsPhotography&lt;/a&gt; &lt;img src=&#34;https://jldinh.com/images/cc.png#cc&#34; alt=&#34;&#34; title=&#34;Attribution License&#34; /&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Banner photo by &lt;a href=&#34;http://www.flickr.com/photos/126377022@N07/14596416049&#34;&gt;Internet Archive Book Images&lt;/a&gt; &lt;/small&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Boolean algebra and adaptive programs</title>
      <link>https://jldinh.com/2015/09/13/boolean-algebra-and-adaptive-programs</link>
      <pubDate>Sun, 13 Sep 2015 15:34:56 +0000</pubDate>
      
      <guid>https://jldinh.com/2015/09/13/boolean-algebra-and-adaptive-programs</guid>
      <description>&lt;p&gt;If you have any experience of programming, you probably know that interactive programs rely on testing conditions and acting according to the outcomes.&lt;/p&gt;

&lt;p&gt;If not, imagine programming a self-driving racing car. If you give it a predetermined set of instructions, it might be able to drive itself on a given racing circuit. However, you are going to run into a wall if you put that car on another circuit (literally), or if you add other cars to the circuit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jldinh.com/images/carcrash.jpg&#34; alt=&#34;&#34; title=&#34;Ferrari Kiss by Valentini.antoine&#34; /&gt; &lt;small&gt;Photo by &lt;a href=&#34;http://www.flickr.com/photos/47918183@N04/9129393830&#34;&gt;Valentini.antoine&lt;/a&gt; &lt;a href=&#34;http://creativecommons.org/licenses/by-sa/2.0/&#34; title=&#34;Attribution-ShareAlike License&#34;&gt;&lt;img src=&#34;https://jldinh.com/images/cc.png#cc&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;In order for a program to be robust and able to adapt to its environment, it needs to check its state and the state of its environment (e.g.: is there a car ahead? If so, am I driving faster than it?) and act accordingly (e.g.: overtake it or just keep driving normally).
&lt;pre&gt;if {there is a car ahead} and {I am faster}:
    {I overtake it}
else:
    {I keep driving normally}&lt;/pre&gt;
This holds for computer programs, but also for biological programs. Let&amp;rsquo;s take the example of plants. If you have plants, you might have noticed that they have a tendency to grow towards the light. This is particularly striking if you have a potted plant on a window sill.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jldinh.com/images/phototropism.jpg&#34; alt=&#34;&#34; title=&#34;dsc_2948.jpg by r_neches&#34; /&gt; &lt;small&gt;Photo by &lt;a href=&#34;http://www.flickr.com/photos/66777430@N00/2081938105&#34;&gt;r_neches&lt;/a&gt; &lt;a href=&#34;http://creativecommons.org/licenses/by/2.0/&#34; title=&#34;Attribution License&#34;&gt;&lt;img src=&#34;https://jldinh.com/images/cc.png#cc&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Their program is something like:
&lt;pre&gt;if {I am growing towards the light}:
    {I keep growing}
else:
    {I bend towards the light}&lt;/pre&gt;
In the EpiTraits project, I am working on something a little different: the control of flowering. Still, it can be summarized in a similar way:
&lt;pre&gt;if {days are long} and {the cold weather is over}:
    {I make flowers}
else:
    {I make leaves}&lt;/pre&gt;
&lt;img src=&#34;https://jldinh.com/images/flower.jpg&#34; alt=&#34;&#34; title=&#34;White Flower by Jeff Kubina&#34; /&gt; &lt;small&gt;Photo by &lt;a href=&#34;http://www.flickr.com/photos/95118988@N00/8156603&#34;&gt;Jeff Kubina&lt;/a&gt; &lt;a href=&#34;http://creativecommons.org/licenses/by-sa/2.0/&#34; title=&#34;Attribution-ShareAlike License&#34;&gt;&lt;img src=&#34;https://jldinh.com/images/cc.png#cc&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;You might have noticed that, in both computer and biological programs, the conditions we want to test for may be composed of several sub-clauses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;{there is a car ahead} and {I am faster}&lt;/li&gt;
&lt;li&gt;{days are long} and {the cold weather is over}
These are examples of Boolean algebra. Boolean algebra deals with variables that are either True or False, and the operations used to combined them, which include &amp;ldquo;and&amp;rdquo; (as seen above), &amp;ldquo;or&amp;rdquo;, &amp;ldquo;not&amp;rdquo;, and all combinations of the above.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we consider two statements A and B:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(A and B) is true if and only if both A and B are True&lt;/li&gt;
&lt;li&gt;(A or B) is true if and only if A is True, B is True, or both are True&lt;/li&gt;
&lt;li&gt;(not A) is true if and only if A is False.
As you can see, &amp;ldquo;and&amp;rdquo; and &amp;ldquo;or&amp;rdquo; are binary operators, and &amp;ldquo;not&amp;rdquo; is a unary operator.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, it is possible to use them to combine an arbitrary number of statements into a single statement. For instance, with 4 statements A, B, C and D, we could have:&lt;/p&gt;

&lt;p&gt;(A and B) or (C and (not D))&lt;/p&gt;

&lt;p&gt;Biological applications of Boolean algebra include Boolean models of Gene Regulatory Networks. Indeed, biological programs result from the coordinated expression of genes that regulate each other, so the activity of a gene can be described using Boolean algebra.&lt;/p&gt;

&lt;p&gt;In the flowering example I mentioned above, the gene that represents flowering is SOC1. It is activated by a day-length dependent gene, FT, and repressed by FLC, a gene that is itself repressed when the temperature is low.&lt;/p&gt;

&lt;p&gt;We therefore have:
&lt;pre&gt;FT = {daylength is long}
FLC = {winter is not over}
SOC1 = FT and (not FLC)&lt;/pre&gt;
SOC1 is on if FT is on and FLC is off.&lt;/p&gt;

&lt;p&gt;We can do this for any gene of interest. The end result is a model able to predict the evolution of a biological system based on the inputs of the model (here, how long days are, and whether winter is over or not).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jldinh.com/images/crocus.jpg&#34; alt=&#34;&#34; title=&#34;Snowy Crocus by Red Junasun&#34; /&gt; &lt;small&gt;Photo by &lt;a href=&#34;http://www.flickr.com/photos/41994050@N07/6823430303&#34;&gt;Red Junasun&lt;/a&gt; &lt;a href=&#34;http://creativecommons.org/licenses/by/2.0/&#34; title=&#34;Attribution License&#34;&gt;&lt;img src=&#34;https://jldinh.com/images/cc.png#cc&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Banner photo by &lt;a href=&#34;http://www.flickr.com/photos/39377065@N08/6921390393&#34;&gt;OpenPlaques&lt;/a&gt; &lt;a href=&#34;http://creativecommons.org/licenses/by/2.0/&#34; title=&#34;Attribution License&#34;&gt;&lt;img src=&#34;https://jldinh.com/images/cc.png#cc&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>EpiTRAITS outreach</title>
      <link>https://jldinh.com/2015/09/13/epitraits-outreach</link>
      <pubDate>Sun, 13 Sep 2015 15:24:14 +0000</pubDate>
      
      <guid>https://jldinh.com/2015/09/13/epitraits-outreach</guid>
      <description>&lt;p&gt;This is a series of post I am starting as an outreach activity, in the context of my PhD research program, &lt;a href=&#34;http://www.epitraits.eu/&#34;&gt;EpiTRAITS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In these posts, I will try to explain some engineering and modeling approaches - not necessarily closely linked to my actual work for EpiTRAITS - that can be useful in real life.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Banner photo by &lt;a href=&#34;http://www.flickr.com/photos/93529274@N00/1508924823&#34;&gt;thepatrick&lt;/a&gt; &lt;a href=&#34;http://creativecommons.org/licenses/by/2.0/&#34; title=&#34;Attribution License&#34;&gt;&lt;img src=&#34;https://jldinh.com/images/cc.png#cc&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Install the Sofa Framework on Ubuntu 14.04</title>
      <link>https://jldinh.com/2015/09/07/install-the-sofa-framework-on-ubuntu-14-04</link>
      <pubDate>Mon, 07 Sep 2015 10:41:05 +0000</pubDate>
      
      <guid>https://jldinh.com/2015/09/07/install-the-sofa-framework-on-ubuntu-14-04</guid>
      <description>&lt;p&gt;The instructions provided on the &lt;a href=&#34;https://www.sofa-framework.org/documentation/general-documentation/build-sofa/&#34;&gt;Sofa website&lt;/a&gt; are for Ubuntu 12.04. They mostly apply to Ubuntu 14.04 as well, except:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You do not need cmake binaries from other repositories.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;libopencascade-dev no longer exists, it has been replaced by many packages. I am not sure which ones are necessary, so, in doubt, I just installed them all:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;liboce-caf-dev&lt;/li&gt;
&lt;li&gt;liboce-modeling-dev&lt;/li&gt;
&lt;li&gt;liboce-visualization-dev&lt;/li&gt;
&lt;li&gt;liboce-foundation-dev&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Before building, you might want to enable other features/plugins. From the build-release folder, run:&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;pre&gt;cmake-gui ..&lt;/pre&gt;
and pick what you need. If you happen to be installing Sofa to use in conjunction with OpenAlea/VirtualPlants through the sofameca module (developed by the VirtualPlants team, not open source yet), pick these:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SOFA-LIB_GUI_QGLVIEWER&lt;/li&gt;
&lt;li&gt;SOFA-PLUGIN_FLEXIBLE&lt;/li&gt;
&lt;li&gt;SOFA-PLUGIN_IMAGE&lt;/li&gt;
&lt;li&gt;SOFA-PLUGIN_SOFAPYTHON
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;small&gt;Banner photo by &lt;a href=&#34;https://flic.kr/p/bASEfK&#34;&gt;Scott Allen&lt;/a&gt; &lt;a href=&#34;http://creativecommons.org/licenses/by-nd/2.0/&#34; title=&#34;Attribution-NoDerivs License&#34;&gt;&lt;img src=&#34;https://jldinh.com/images/cc.png#cc&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Integration of ODE systems with sparse Jacobians in Python</title>
      <link>https://jldinh.com/2015/09/07/integration-of-ode-systems-with-sparse-jacobians-in-python</link>
      <pubDate>Mon, 07 Sep 2015 10:12:45 +0000</pubDate>
      
      <guid>https://jldinh.com/2015/09/07/integration-of-ode-systems-with-sparse-jacobians-in-python</guid>
      <description>&lt;p&gt;The Centre for Plant Integrative Biology (CPIB, University of Nottingham) has developed a Python module based on the Fortran library ODEPACK to integrate ODE systems with sparse Jacobian matrices. It is quite similar in usage to the odeint function from Scipy.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download &amp;ldquo;SimuPlant Server&amp;rdquo; from &lt;a href=&#34;http://www.simuplant.org&#34;&gt;http://www.simuplant.org&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Open the archive.&lt;/li&gt;
&lt;li&gt;Extract the &amp;ldquo;odesparse_1&amp;rdquo; folder. This is all we need.&lt;/li&gt;
&lt;li&gt;Move to the extracted &amp;ldquo;odesparse_1&amp;rdquo; folder and install the module.
&lt;pre&gt; python setup.py install&lt;/pre&gt;
You will need a Fortran compiler.&lt;/li&gt;
&lt;li&gt;You can then import the &amp;ldquo;odesparse&amp;rdquo; module in Python. To integrate ODEs, use the &amp;ldquo;odesparse.odeints&amp;rdquo; function. You can refer to the &amp;ldquo;README&amp;rdquo; file in the &amp;ldquo;odesparse_1&amp;rdquo; folder for the exact usage, which slightly differs from &amp;ldquo;odeint&amp;rdquo; in Scipy.&lt;/li&gt;
&lt;li&gt;One important feature of odeints is that it takes the keyword argument &amp;ldquo;JPat&amp;rdquo;, which enables you to provide the structure (matrix of 0s and 1s) of the Jacobian matrix, as a Scipy sparse matrix (e.g.: lilmatrix or csr).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;small&gt;Banner photo by &lt;a href=&#34;http://www.flickr.com/photos/30939981@N00/15850989974&#34;&gt;Pai Shih&lt;/a&gt; &lt;a href=&#34;http://creativecommons.org/licenses/by/2.0/&#34; title=&#34;Attribution License&#34;&gt;&lt;img src=&#34;https://jldinh.com/images/cc.png#cc&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>